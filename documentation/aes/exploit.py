from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import random
import datetime

def key_exploit(seed):
    random.seed(seed)
    def not_so_random():
        random_number = random.randint(0, 2**128 - 1)
        return random_number.to_bytes(16, byteorder='big')

    key = not_so_random()
    nonce = not_so_random()
    return key, nonce




def insecure_aes_decrypt(ciphertext):
    current_time = datetime.datetime.now().time()
    time_str = str(current_time)
    time = time_str.split(':')
    initial_time = time[0]
    seed = time[0] 
    for i in range(1, 60):
        seed += str(i)
        key, nonce = key_exploit(seed)
        try:
            cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
            padded_plaintext = cipher.decrypt(ciphertext)
            plaintext = unpad(padded_plaintext, AES.block_size)
            if b'ENO' in plaintext:
                print("Seed:", seed)
                break
        except Exception as e:
            #Print the error message
            #print("An error occurred:", e)
            pass
        seed = initial_time
    #return plaintext

