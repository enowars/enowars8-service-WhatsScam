import rsa
from cryptography.hazmat.primitives.asymmetric import rsa as crsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
import math

# Generate RSA key pair
def expprime(cipher, publickey):
    n = publickey.n
    e = publickey.e
    p = math.isqrt(n + 4)-2
    q = p + 4
    # Calculate private exponent
    d = rsa.common.inverse(e, (p-1)*(q-1))

    # Generate RSA key object
    private_key = rsa.PrivateKey(n, e, d, p, q)
    print("Private key: ", private_key.save_pkcs1().decode())

    # Decrypt message with private key
    plaintext = rsa.decrypt(cipher, private_key)
    print("Decrypted message:")
    print(plaintext.decode())
    

    

    
