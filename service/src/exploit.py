from Crypto.Cipher import AES
from Crypto.Random import get_random_bytes
from Crypto.Util.Padding import pad, unpad
import random
import datetime
import rsa
from cryptography.hazmat.primitives.asymmetric import rsa as crsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import padding
from cryptography.hazmat.primitives import hashes
import math
import base64


def key_exploit(seed):
    random.seed(seed)
    def not_so_random():
        random_number = random.randint(0, 2**128 - 1)
        return random_number.to_bytes(16, byteorder='big')

    key = not_so_random()
    nonce = not_so_random()
    return key, nonce

def insecure_aes_decrypt(ciphertext, seed):
    seed = seed
    key, nonce = key_exploit(seed)
    ciphertext = base64.b64decode(ciphertext) 
    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    padded_plaintext = cipher.decrypt(ciphertext)
    plaintext = unpad(padded_plaintext, AES.block_size)
    return plaintext

def not_so_random():
    random_number = random.randint(0, 2**128 - 1)
    return random_number.to_bytes(16, byteorder='big')

def insecure_aes_encrypt(plaintext):
    current_time = datetime.datetime.now().time()
    time_str = str(current_time)
    time = time_str.split(':')
    seed = time[0] + time[1]
    random.seed(seed)

    key = not_so_random()
    nonce = not_so_random()

    cipher = AES.new(key, AES.MODE_GCM, nonce=nonce)
    plaintext_bytes = plaintext.encode()
    padded_plaintext = pad(plaintext_bytes, AES.block_size)
    ciphertext = cipher.encrypt(padded_plaintext)
    return base64.b64encode(ciphertext).decode(), seed

def expprime(cipher, publickey):
    n = publickey.n
    e = publickey.e
    p = math.isqrt(n + 4)-2
    q = p + 4
    # Calculate private exponent
    d = rsa.common.inverse(e, (p-1)*(q-1))

    # Generate RSA key object
    private_key = rsa.PrivateKey(n, e, d, p, q)
    #print("Private key: ", private_key.save_pkcs1().decode())

    # Decrypt message with private key
    plaintext = rsa.decrypt(cipher, private_key)
    print("Decrypted message:")
    print(plaintext.decode())

if __name__ == "__main__":
    # cipher, seed = insecure_aes_encrypt("5kY0IAjEFkgpYZ/s+2GyZQ==")
    flag = "ðŸ¥ºh3lWJ0o5bO4zymUtaaXyG05zjlO1xoIwv0vTCj7v1kt6zoU+ðŸ¥ºðŸ¥º"
    cipher, seed = insecure_aes_encrypt(flag)
    print(cipher)
    #cipher = "oUQXt2uVi47FmsHokkeL6Ou/BKk3mZGuCB5VleDFJ8xwaKd/zmeJnjq1fBdhFqtMUWMeufU1BOHeqBczIsPtTA=="
    print(base64.b64decode(cipher))

    for hour in range(24):         # Loop over hours from 0 to 23
        for minute in range(60):   # Loop over minutes from 0 to 59
            # Format hour and minute into "HHMM" format without colons
            try:
                formatted_time = f"{hour:02d}{minute:02d}"
                seed1 = formatted_time
                decryp = insecure_aes_decrypt(cipher, seed1)
                print(decryp.decode())
            except:
                pass
    





