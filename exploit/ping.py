import random
from requests import Session
import string
import threading
import time
import asyncio
import scam_messages

address = "http://localhost:9696/"
THREADS = 100
spam = False
if spam:
    THREADS = 1


# timing decorator
#https://github.com/enowars/enowars8-service-SCEAM/blob/main/checker/stress_test/registration.py 
#creator misc

def timing(f):
    def wrap(*args):
        time1 = time.time()
        ret = f(*args)
        time2 = time.time()
        diff = time2-time1
        print(f'{f.__name__} took {diff:.2f} s')
        print(f'{f.__name__} took {diff/THREADS:.5f} s per thread')
        return ret
    return wrap


def generate_random_string(length):
    return ''.join(
        random.choices(
            string.ascii_letters +
            string.digits,
            k=length))


def register():
    name = generate_random_string(20)
    email = name + "@" + generate_random_string(20) + ".scamfffffffff"
    password1 = generate_random_string(20)
    password2 = password1
    public_key = "on"
    #public_key = "None"
    data = {'email': email, 'name': name, 'public_key': public_key,
            'password1': password1, 'password2': password2}
    data['vendor_lock'] = 'on'
    data['never_full'] = 'on'

    client = Session()
    try:
        r = client.post(
            address + "sign-up",
            data=data,
            allow_redirects=True,
        )

    except:
        print("registration failed")


def spam_messages():
    name = generate_random_string(20)
    email = name + "@" + generate_random_string(20) + ".scamfffffffff"
    password1 = generate_random_string(20)
    password2 = password1
    public_key = None
    #public_key = "None"
    data = {'email': email, 'name': name, 'public_key': public_key,
            'password1': password1, 'password2': password2}
    data['vendor_lock'] = 'on'
    data['never_full'] = 'on'

    client = Session()
    try:
        r = client.post(
            address + "sign-up",
            data=data,
            allow_redirects=True,
        )

    except:
        print("registration failed")


    for i in range(0, 20):
        message = scam_messages.get_scam_message()
        public_key = None
        try:
            response = client.post(
                address + "/",
                data={"note": message, "public_key": public_key},
                allow_redirects=True,
            )
        except:
            print("message failed")
        


@timing
def create_threads(threads):
    for i in range(THREADS):
        #spam_messages()
        if spam:
            t = threading.Thread(target=spam_messages)
        else:
        #spam_register()
            t = threading.Thread(target=register)
        threads.append(t)


@timing
def start_threads(threads):
    for t in threads:
        t.start()


@timing
def join_threads(threads):
    for t in threads:
        t.join()


@timing
def stress():
    threads = []
    create_threads(threads)
    start_threads(threads)
    join_threads(threads)


if __name__ == "__main__":
    stress()
    