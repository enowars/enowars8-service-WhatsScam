# import subprocess
# import datetime
# import logging
# from gmpy2 import is_prime
# import ctypes
# import os

# def compile_c_program():
#     command = ["gcc", "-shared", "-o", "src/key_gen.so", "-fPIC", "src/key_gen.c", "-lgmp"]
#     result = subprocess.run(command, capture_output=True, text=True)
#     if result.returncode == 0:
#         print("Compilation successful.")
#     else:
#         print(f"Compilation failed:\n{result.stderr}")
#         exit(1)

# def get_prime_from_c():
#     lib = ctypes.CDLL(os.path.abspath("./src/key_gen.so"))

#     # Define the argument and return types of the C function
#     lib.main.argtypes = [ctypes.c_char_p, ctypes.c_char_p, ctypes.c_int]
#     lib.main.restype = None

#     # Prepare buffers for the prime numbers
#     p_str = ctypes.create_string_buffer(256)
#     q_str = ctypes.create_string_buffer(256)

#     # Call the C function
#     lib.main(p_str, q_str, 256)

#     # Convert buffers to Python strings
#     p = p_str.value.decode('utf-8')
#     q = q_str.value.decode('utf-8')

#     return p, q


import subprocess
import datetime
import logging
from gmpy2 import is_prime

#done in dockerfile
def compile_c_program():
    result = subprocess.run(["gcc", "-o", "src/key_gen", "src/key_gen.c", "-lgmp"], capture_output=True, text=True)
    if result.returncode == 0:
        print("Compilation successful.")
    else:
        print(f"Compilation failed:\n{result.stderr}")
        exit(1)

def run_c_program():
    command = "./src/key_gen"
    process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()

    if stderr:
        print(f"Errors encountered:\n{stderr.decode('utf-8')}")
        return None, None

    output = stdout.decode('utf-8').strip().split('\n')
    output = list(output)
    return output[0],output[1]

def get_prime_from_c():
    start = datetime.datetime.now()
    while True:
        p, q = run_c_program()
        p = int(p)
        q = int(q)
        #print("time taken:", datetime.datetime.now() - start)
        if is_prime(p) and is_prime(q) and p.bit_length() == 256 and q.bit_length() == 256:
            return p,q

if __name__ == "__main__":
    compile_c_program()
    start = datetime.datetime.now()
    for i in range(0,100):
        get_prime_from_c()
    print("time taken:", datetime.datetime.now() - start)